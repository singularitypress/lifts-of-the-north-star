import { Container, Modal } from "@components/global";
import { Exercise, Workout } from "@types";
import Head from "next/head";
import { useEffect, useState } from "react";
import { v4 as uuidv4 } from "uuid";

export default function Workouts() {
  const [editId, setEditId] = useState<string>("");
  const [workouts, setWorkouts] = useState<Workout[]>([]);
  const [exercises, setExercises] = useState<Exercise[]>([]);
  const [newExerciseVisible, setNewExerciseVisible] = useState(false);
  const [selectedExercises, setSelectedExercises] = useState<string[]>([]);
  const [name, setName] = useState<string>("");

  useEffect(() => {
    if (typeof window !== "undefined") {
      const lsExercises = JSON.parse(localStorage.getItem("exercises") ?? "[]");
      const lsWorkouts = JSON.parse(localStorage.getItem("workouts") ?? "[]");
      setExercises(lsExercises);
      setWorkouts(lsWorkouts);
      if (lsExercises.length === 0) {
        localStorage.setItem("exercises", JSON.stringify([]));
      }
      if (lsWorkouts.length === 0) {
        localStorage.setItem("workouts", JSON.stringify([]));
      }
    }
  }, []);

  useEffect(() => {
    if (!newExerciseVisible) {
      setName("");
      setSelectedExercises([]);
    }
  }, [newExerciseVisible]);

  const transition = "transition ease-in duration-200";

  return (
    <>
      <Head>
        <title>Lifts of the North Star</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="pt-24">
        <Container>
          <div className="mb-4">
            <button
              className={`${transition} mr-4 border border-slate-900/10 dark:border-slate-100/10 rounded-md px-6 py-3 hover:-translate-y-1`}
              onClick={() => setNewExerciseVisible(true)}
            >
              <i className="fa-solid fa-dumbbell"></i> <strong>Add new</strong>
            </button>
          </div>
          <ul className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {workouts.map(
              ({
                id: workoutId,
                name: workoutName,
                exercises: workoutExercises,
              }) => {
                return (
                  <li
                    key={workoutId}
                    className="border border-slate-900/10 dark:border-slate-100/10 rounded-md px-6 py-3"
                  >
                    <div className="w-full flex items-end justify-end">
                      <button
                        className="text-slate-900 dark:text-slate-100 hover:text-blue-500 dark:hover:text-blue-500"
                        onClick={() => {
                          setName(workoutName);
                          setSelectedExercises(workoutExercises);
                          setNewExerciseVisible(true);
                          setEditId(workoutId);
                        }}
                      >
                        <i className="fa-solid fa-edit"></i>
                      </button>
                      <button
                        onClick={() => {
                          const newWorkouts = [...workouts];
                          newWorkouts.splice(
                            newWorkouts.findIndex((e) => e.id === workoutId),
                            1
                          );
                          setWorkouts(newWorkouts);
                          localStorage.setItem(
                            "workouts",
                            JSON.stringify(newWorkouts)
                          );
                        }}
                        className="ml-4 text-slate-900 dark:text-slate-100 hover:text-red-500 dark:hover:text-red-500"
                      >
                        <i className="fa-solid fa-trash"></i>
                      </button>
                    </div>
                    <strong>Name:</strong> {workoutName}
                    <br />
                    <strong>Exercises:</strong>
                    <br />
                    {workoutExercises.map((item) => {
                      const exerciseObj = exercises.filter(
                        (e) => e.id === item
                      )[0];
                      exercises.forEach((e) => {
                        console.log(item);
                      });
                      return (
                        <div key={exerciseObj?.id}>
                          <>
                            {exerciseObj?.name} - <br />
                            {Object.entries(exerciseObj?.sets).map(
                              ([key, { type, value }]) => (
                                <>
                                  {key}: {value} {type}
                                  <br />
                                </>
                              )
                            )}
                          </>
                        </div>
                      );
                    })}
                  </li>
                );
              }
            )}
          </ul>
        </Container>
      </main>
      <Modal visible={newExerciseVisible} setVisible={setNewExerciseVisible}>
        <div className="flex flex-col items-center justify-center">
          <h1 className="text-2xl font-bold  mb-4">Add new exercise</h1>
          <form
            className="flex flex-col justify-center items-start"
            onSubmit={(e) => e.preventDefault()}
          >
            <label htmlFor="name" className="mb-2">
              Name
            </label>
            <input
              type="text"
              name="name"
              id="name"
              placeholder="Name"
              className="border border-slate-900/10 dark:border-slate-100/10 rounded-md px-6 py-3 mb-4"
              value={name}
              onChange={(e) => setName(e.target.value ?? "")}
            />
            <div className="mb-2">
              {[...Array(selectedExercises.length)].map((_, i) => (
                <div
                  key={i}
                  className="flex flex-col justify-center items-start w-full"
                >
                  <label htmlFor="selected-exercise" className="mb-2">
                    Selected Exercise
                  </label>
                  <select
                    name="selected-exercise"
                    id="selected-exercise"
                    className="border border-slate-900/10 dark:border-slate-100/10 rounded-md px-6 py-3 mb-4"
                    value={selectedExercises[i]}
                    onChange={(e) => {
                      const newSelectedExercises = [...selectedExercises];
                      newSelectedExercises[i] = e.target.value;
                      setSelectedExercises(newSelectedExercises);
                    }}
                  >
                    <option value="">Select an exercise</option>
                    {exercises.map(({ id, name }) => (
                      <option key={id} value={id}>
                        {name}
                      </option>
                    ))}
                  </select>
                </div>
              ))}
            </div>
            <div className="mb-4">
              <button
                className={`${transition} mr-4 border border-slate-900/10 dark:border-slate-100/10 rounded-md px-6 py-3 hover:-translate-y-1`}
                onClick={() => {
                  setSelectedExercises([...selectedExercises, ""]);
                }}
              >
                Add Exercise
              </button>
              {selectedExercises.length > 0 && (
                <button
                  className={`${transition} border border-slate-900/10 dark:border-slate-100/10 rounded-md px-6 py-3 hover:-translate-y-1`}
                  onClick={() => {
                    setSelectedExercises(selectedExercises.slice(0, -1));
                  }}
                >
                  Remove Exercise
                </button>
              )}
            </div>
            {editId ? (
              <button
                className={`${transition} border border-slate-900/10 dark:border-slate-100/10 rounded-md px-6 py-3 hover:-translate-y-1`}
                onClick={() => {
                  const newWorkouts = workouts.map((item) => {
                    if (item.id === editId) {
                      return {
                        ...item,
                        name,
                        exercises: selectedExercises,
                      };
                    } else {
                      return item;
                    }
                  });
                  setWorkouts(newWorkouts);
                  if (typeof window !== "undefined") {
                    localStorage.setItem(
                      "workouts",
                      JSON.stringify(newWorkouts)
                    );
                  }
                  setEditId("");
                  setNewExerciseVisible(false);
                }}
              >
                Save Edit
              </button>
            ) : (
              <button
                className={`${transition} border border-slate-900/10 dark:border-slate-100/10 rounded-md px-6 py-3 hover:-translate-y-1`}
                onClick={() => {
                  const id = uuidv4();

                  const newWorkoutList = [
                    ...workouts,
                    {
                      id,
                      name,
                      exercises: selectedExercises,
                    },
                  ];
                  setWorkouts(newWorkoutList);
                  if (typeof window !== "undefined") {
                    localStorage.setItem(
                      "workouts",
                      JSON.stringify(newWorkoutList)
                    );
                  }
                  setNewExerciseVisible(false);
                }}
              >
                <i className="fa-solid fa-dumbbell"></i>{" "}
                <strong>Add new</strong>
              </button>
            )}
          </form>
        </div>
      </Modal>
    </>
  );
}
